generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  image                    String?
  name                     String    @unique
  slug                     String?   @unique
  email                    String    @unique
  emailVerified            Boolean
  role                     UserRole  @default(CUSTOMER)
  stripeCustomerId         String?   @unique
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  hasActiveSubscription    Boolean   @default(false)
  subscriptionUpdatedAt    DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  chats                    Chat[]
  accounts                 Account[]
  sessions                 Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Philosopher {
  id           String           @id @default(cuid())
  name         String           @unique
  slug         String           @unique
  era          PhilosophicalEra
  imageUrl     String
  description  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  systemPrompt String
  chats        Chat[]
}

model Chat {
  id            String        @id @default(cuid())
  name          String
  userId        String
  philosopherId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  philosopher   Philosopher   @relation(fields: [philosopherId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      ChatMessage[]
}

model ChatMessage {
  id        String          @id @default(cuid())
  content   String
  role      ChatMessageRole
  chatId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  chat      Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum PhilosophicalEra {
  ANCIENT_EAST
  PRE_SOCRATIC
  CLASSICAL_GREEK
  HELLENISTIC
  ROMAN
  MEDIEVAL_EARLY
  MEDIEVAL_HIGH
  MEDIEVAL_LATE
  RENAISSANCE
  EARLY_MODERN
  ENLIGHTENMENT
  ROMANTICISM
  LATE_MODERN
  EARLY_CONTEMPORARY
  POSTMODERN
  CONTEMPORARY
}

enum ChatMessageRole {
  USER
  ASSISTANT
}
